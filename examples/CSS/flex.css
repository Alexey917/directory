/* Flexbox CSS - технология которая позволяет разместить элементы внутри флекс контейнера относительно главной оси (main axis) и поперечной (cross axis)*/

.block1 {
  display: flex; /* делаем блок флексовым контейнером (блок занимает всю ширину экрана, а элементы подстраиваются под размер контента) */
  display: inline-flex;/* делаем блок флексовым контейнером (ширина блока подстраивается под контент, и элементы подстраиваются под размер контента) */
}

/* направление осей */

.block2 {
  flex-direction: row; /* главная ось по горизонтали, элементы располагаются слева направо сверху вниз */
  flex-direction: row-reverse; /* главная ось по горизонтали, элементы располагаются справа налево сверху вниз */
  flex-direction: column; /* главная ось по вертикали, элементы располагаются сверху вниз (ширина равна ширине контейнера)*/
  flex-direction: column-reverse; /* главная ось по вертикали, элементы располагаются снизу вверх (ширина равна ширине контейнера)*/
}

/* обертка элементов и отступы */

.block3 {
  flex-wrap: wrap; /* элементы могут переходить на новый ряд, если не хватиет места */
  flex-wrap: nowrap; /* элементы не могут переходить на новый ряд, если не хватиет места (по умолчанию) */
  flex-wrap: wrap-reverse; /* элементы могут переходить на новый ряд, если не хватиет места, поперечная ось меняет направление */
  flex-flow: column wrap; /* сочетает в себе flex-direction и flex-wrap */

  gap: 30px; /* отступ между элементами */
  /* внешние отступы (margin) не схлопываются во флекс контейнере */
}

/* выравнивание элементов вдоль главной оси */

.block4 {
  justify-content: center; /* выравнивает элементы по центру */
  justify-content: flex-start; /* выравнивает элементы от начала оси */
  justify-content: flex-end; /* выравнивает элементы с оси */
  justify-content: space-between; /* выравнивает прижимая крайние элементы к краям оси */
  justify-content: space-around; /* выравнивает добавляя равномерный отступ вокруг элемента, на стыке отступы приплюсовываются */
  justify-content: space-evenly; /* выравнивает добавляя равномерный отступ между элементами и контейнером */
  /* изменив направление главной оси через flex-direction: column, чтобы заработал justify-content нужно задать высоту */
}

/* Выравнивание по поперечной оси */

.block5 {
 align-items: flex-start; /* выравнивание от начала оси */
 align-items: flex-end; /* выравнивание от конца оси */
 align-items: stretch;  /* растягивает элементы по ширине оси */
 align-items: baseline; /* выравнивание элементы по их середине */
 align-items: center; /* выравнивание по центру оси */
}

/* многострочное выравнивание */

.block6 {
  /* работает только по поперечной оси и с установленным свойством flex-wrap: wrap */
  align-content: flex-start; /* выравнивание от начала оси */
  align-content:flex-end; /* выравнивание от конца оси */
  align-content: center; /* выравнивание по центру оси */
  align-content: stretch; /* растягивает элементы по ширине оси */
  align-content: space-between; /* выравнивает прижимая крайние элементы к краям оси */
  align-content: space-around; /* выравнивает добавляя равномерный отступ вокруг элемента, на стыке отступы приплюсовываются */
}

/* выравнивание отдельных элементов */

.block7 {
  /* выравнивание происходит по поперечной оси */
  align-self: center; /* выравнивание по центру оси */
  align-self: stretch; /* растягивает элементы по ширине оси */
  align-self: flex-start; /* выравнивание от начала оси */
  align-self: flex-end; /* выравнивание от конца оси */
  align-self: baseline; /* выравнивание элементы по их середине */
  /* с включенный flex-wrap: wrap  элемент выравнивается относительно ряда */
}

/* задание размеров элементу */

.block8 {
  flex-grow: 3; /* пропорция того сколько свободного пространства может занять элемент (по умолчанию значение 1)  */
  flex-shrink: 2; /* пропорция того сколько свободного пространства может отдать элемент (готов ли он сжиматься) (по умолчанию значение 1) */
  flex-basis: 200px; /* задание размера элемента main - ширина, cross - высота */
  flex: 1 0 33.33%; /* объединение свойств grow-shrink-basis */
}

/* порядок элементов */

.blokc9 {
  order: 0; /* по умолчанию у всех элементов */
  order: 1; /* перенесет элемент в конец */
  order: -1; /* перенесет элемент в начало */
}