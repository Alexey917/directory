* {
  /* 
    * - селектор, 
    {} - блок объявления, 
    box-sizing: border-box; - правило, 
    box-sizing - свойство, 
    border-box - значение 
   */
  box-sizing: border-box; 
}

/* подключение стилей: 
  1. внутренние стили через тег style в теге head html файла,
  2. инлайновые стили - внутри тега html
  3. внешние стили - в отдельном css файле, который подкючается через тег link в html
  4. внешние стили - подключаются через @import file.css
 */

 /* Простые селектора типы: */

 * {} /* селектор общего назначения */

 h1 {} /* селектор тега */

 .header {} /* селектор класса (советуется использовать для стилизации элементов) */

 #id {}  /* селектор id (советуется применять для js, чтобы быстрее находить элменты) */

/* вес селекторов:
  инлайновые стили 1000 (можно переопределить только через !important - bad practice)
  id 100
  class, pseudoclass, селектор атрибута 10
  element, pseudoelement 1
*/

/* простые селектора можно комбинировать */
q.simple {}


/* составные селектора: */

/* групповой селектор */
h1,
p,
span {

}

/* селектор потомка */
div p {}

/* селектор прямого потомка */
ul li > span {}

/* селектор соседний */
ul li + li {}

/* селектор следующего элемента */
ul li ~ li {}

/* селектор атрибута */
a[target] {}

/* селектор атрибута начинающийся с "" */
a[href^=""] {}

/* селектор атрибута заканчивающийся на "" */
a[href$=""] {}

/* селектор атрибута наличие указанного совпадения */
a[href*=""] {}

/* псевдоклассы: */

a:hover {}  /* эффект наведения */

a:visited {}  /* эффект посещенной ссылки */

a:focus {}  /* эффект при переключении на активный элемент кнопкой tab */

a:active {}  /* эффект нажатого активного элемента */

li:first-child {}  /* первый элемент списка */

li:last-child {}  /* последний элемент списка */

li:nth-child(even) {}  /* нечетный элемент списка */

li:nth-child(odd) {}  /* четный элемент списка */

li:nth-child(5) {} /* пятый элемент списка */

li:nth-child(3n) {} /* каждый третий элемент списка */

li:nth-child(3n + 1) {} /* каждый третий начиная от первого элемент списка */

span:first-of-type {} /* аналогично first-child только применяется для дочерних элементов */

span:last-of-type {} /* аналогично last-child только применяется для дочерних элементов */

span:nth-of-type(3) {} /* аналогично nth-child только применяется для дочерних элементов */

.list:not(.main) {} /* для всех кроме .main */


/* псевдоэелементы: */

p::first-letter {} /* стилизуем первый символ параграфа */
 
p::first-line {} /* стилизуем первую строчку параграфа */

h1:after {} /* добавляем контент после контента h1 внутри тега h1 */

h1:before {} /* добавляем контент после контента h1 внутри тега h1 */


/* 
каскадность - ряд правил(описаны ниже) для добавления нескольких свойств (решает конфликтность и одинаковых селекторов)
важность - наличие правила !important
специфичность - это учет веса селектора
порядок - если есть селекторы с одинаковым весом, то применяется то свойство, которое ниже
 */

 /* 
 дочерние элементы наследуют текстовые свойства от родителя
 рамки, границы, позиционнирование не наследуется
 свойство inherit - позволяет унаследовать значение родителя для любых типов свойств
  */


/* Элементы бывают блочные, сторные и строчно-блочные. 
У строчным элементам нельзя задать размеры(ширину, высоту), 
также для них не применяются margin-top и margin-bottom.
Если два блока стоять друг за другом, то их верхние(нижние) отступы могут схлопываться, 
т.е будет один отступ, который самый большой.

Блочная модель - ее вид можно найти в devtools прямоугольник с рамерами и отступами
box-sizing: border-box - позволяет отсчитывать отступы во внутрь, не увеличивая размер самого блока
margin - внешние отступы
padding - внутренние
 */

 /* позиционировние */

 /* основной поток - когда элементы идут друг за другом сверху вниз */

 p {
  position: absolute; /* элемент выбивается из основного потока и позиционируется от relative */
  position: relative; /* элемент задает новый поток и его положением относительно body можно управлять */
  position: fixed; /* элемент фиксируется относительно окна браузера */
  position: sticky; /* пока элемент не проскроллился исчезнув сверху позиция relative, 
  когда проскроллился fixed и вместе с блоком потом исчезает */
  position: static; /* элемент в основном потоке(позиционирование по умолчанию) */
 }

h2 {
  min-width: 300px; /* задает минимальную допустимую ширину контент растягивается  */
  max-height: 300px; /* задает максимальную допустимую высоту контент растягивается  */
}

/* абсолютные и относительные величины */

/* абсолютные жестко задают размер, пример px */

span {
  font-size: 20px;
}

/* относительные задают размер относительно чего то, пример em, rem, % */

span {
  font-size: 2em; /* увеличвает шрифт в 2 раза от родителя */
}

span {
  font-size: 2rem; /* увеличвает шрифт в 2 раза относительно html { font-size: 16px } */
}

span {
  font-size: 80%; /* увеличвает шрифт на 80% от родителя */
}

/* оптекание и очистка потока */

/* 
- Свойство float вырывает элемент из основного потока. 
- Другие элементы их не видят, в том числе их родительский элемент. 
- Свойство применялось для задания обтекаемости элемента (слева или справа)
- Чтобы родитель не схлопывался, здавали очистку потока через родитель::after {clear: both;} 
или пустого div в конце родителя, которму задави свойство clear: both;
 */


/* шрифты и текст */

 /* 
- web шрифты могут подключаться через тег link в html 
- скаченные подключаются с помощью дерективы @font-face {
font-family: название;
src: url('путь') format("woff"),
     url('путь') format("woff2")
}

- font-style - стиль текста (обычный, курсив)
- font-weight - толщина текста
- при указании семейства шрифтов бывает полезно указать несколько и например sans-serif
- text-decoration - подчеркивание текста
- text-indent - красная строка
- line-height - высота строки
- letter-spacing - расстояние между символами
- word-spacing - расстояние между словами
- text-align - выравнивание текста
- color - цвет текста
- text-transform - регистр текста
*/

/* рамки и тени */

.block {
  border: 1px solid red; /* толщина рамки, тип рамки, цвет рамки (можно задавать в любом порядке) */
  border-right-width: 4px; /* можно задавать конкретные значение для каждой стороны */
  border-left-color: green;
  outline: 1px solid aqua; /* обводка input, элементов в focus при перемещении 
  через tab нужна для acessabilty (ставить значение none не рекомендуется). Не учавствует в блочной модели */
  text-shadow: 3px 6px 18px #345daf; /* тень для текста первые три параметра должны идти по порядку, цвет в любом другом месте */
  box-shadow: inset 2px 10px 16px #187ccd; /* тень элемента, так же как и у текста может быть наложение теней */
}