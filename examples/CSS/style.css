* {
  /* 
    * - селектор, 
    {} - блок объявления, 
    box-sizing: border-box; - правило, 
    box-sizing - свойство, 
    border-box - значение 
   */
  box-sizing: border-box; 
}

/* подключение стилей: 
  1. внутренние стили через тег style в теге head html файла,
  2. инлайновые стили - внутри тега html
  3. внешние стили - в отдельном css файле, который подкючается через тег link в html
  4. внешние стили - подключаются через @import file.css
 */

 /* Простые селектора типы: */

 * {} /* селектор общего назначения */

 h1 {} /* селектор тега */

 .header {} /* селектор класса (советуется использовать для стилизации элементов) */

 #id {}  /* селектор id (советуется применять для js, чтобы быстрее находить элменты) */

/* вес селекторов:
  инлайновые стили 1000 (можно переопределить только через !important - bad practice)
  id 100
  class, pseudoclass, селектор атрибута 10
  element, pseudoelement 1
*/

/* простые селектора можно комбинировать */
q.simple {}


/* составные селектора: */

/* групповой селектор */
h1,
p,
span {

}

/* селектор потомка */
div p {}

/* селектор прямого потомка */
ul li > span {}

/* селектор соседний */
ul li + li {}

/* селектор следующего элемента */
ul li ~ li {}

/* селектор атрибута */
a[target] {}

/* селектор атрибута начинающийся с "" */
a[href^=""] {}

/* селектор атрибута заканчивающийся на "" */
a[href$=""] {}

/* селектор атрибута наличие указанного совпадения */
a[href*=""] {}

/* псевдоклассы: */

a:hover {}  /* эффект наведения */

a:visited {}  /* эффект посещенной ссылки */

a:focus {}  /* эффект при переключении на активный элемент кнопкой tab */

a:active {}  /* эффект нажатого активного элемента */

li:first-child {}  /* первый элемент списка */

li:last-child {}  /* последний элемент списка */

li:nth-child(even) {}  /* нечетный элемент списка */

li:nth-child(odd) {}  /* четный элемент списка */

li:nth-child(5) {} /* пятый элемент списка */

li:nth-child(3n) {} /* каждый третий элемент списка */

li:nth-child(3n + 1) {} /* каждый третий начиная от первого элемент списка */

span:first-of-type {} /* аналогично first-child только применяется для дочерних элементов */

span:last-of-type {} /* аналогично last-child только применяется для дочерних элементов */

span:nth-of-type(3) {} /* аналогично nth-child только применяется для дочерних элементов */

.list:not(.main) {} /* для всех кроме .main */


/* псевдоэелементы: */

p::first-letter {} /* стилизуем первый символ параграфа */
 
p::first-line {} /* стилизуем первую строчку параграфа */

h1:after {} /* добавляем контент после контента h1 внутри тега h1 */

h1:before {} /* добавляем контент после контента h1 внутри тега h1 */


/* 
каскадность - ряд правил(описаны ниже) для добавления нескольких свойств (решает конфликтность и одинаковых селекторов)
важность - наличие правила !important
специфичность - это учет веса селектора
порядок - если есть селекторы с одинаковым весом, то применяется то свойство, которое ниже
 */

 /* 
 дочерние элементы наследуют текстовые свойства от родителя
 рамки, границы, позиционнирование не наследуется
 свойство inherit - позволяет унаследовать значение родителя для любых типов свойств
  */


/* Элементы бывают блочные, сторные и строчно-блочные. 
У строчным элементам нельзя задать размеры(ширину, высоту), 
также для них не применяются margin-top и margin-bottom.
Если два блока стоять друг за другом, то их верхние(нижние) отступы могут схлопываться, 
т.е будет один отступ, который самый большой.

Блочная модель - ее вид можно найти в devtools прямоугольник с рамерами и отступами
box-sizing: border-box - позволяет отсчитывать отступы во внутрь, не увеличивая размер самого блока
margin - внешние отступы
padding - внутренние
 */

 /* позиционировние */

 /* основной поток - когда элементы идут друг за другом сверху вниз */

 p {
  position: absolute; /* элемент выбивается из основного потока и позиционируется от relative */
  position: relative; /* элемент задает новый поток и его положением относительно body можно управлять */
  position: fixed; /* элемент фиксируется относительно окна браузера */
  position: sticky; /* пока элемент не проскроллился исчезнув сверху позиция relative, 
  когда проскроллился fixed и вместе с блоком потом исчезает */
  position: static; /* элемент в основном потоке(позиционирование по умолчанию) */
 }

h2 {
  min-width: 300px; /* задает минимальную допустимую ширину контент растягивается  */
  max-height: 300px; /* задает максимальную допустимую высоту контент растягивается  */
}

/* абсолютные и относительные величины */

/* абсолютные жестко задают размер, пример px */

span {
  font-size: 20px;
}

/* относительные задают размер относительно чего то, пример em, rem, % */

span {
  font-size: 2em; /* увеличвает шрифт в 2 раза от родителя */
}

span {
  font-size: 2rem; /* увеличвает шрифт в 2 раза относительно html { font-size: 16px } */
}

span {
  font-size: 80%; /* увеличвает шрифт на 80% от родителя */
}

/* оптекание и очистка потока */

/* 
- Свойство float вырывает элемент из основного потока. 
- Другие элементы их не видят, в том числе их родительский элемент. 
- Свойство применялось для задания обтекаемости элемента (слева или справа)
- Чтобы родитель не схлопывался, здавали очистку потока через родитель::after {clear: both;} 
или пустого div в конце родителя, которму задави свойство clear: both;
 */


/* шрифты и текст */

 /* 
- web шрифты могут подключаться через тег link в html 
- скаченные подключаются с помощью дерективы @font-face {
font-family: название;
src: url('путь') format("woff"),
     url('путь') format("woff2")
}

- font-style - стиль текста (обычный, курсив)
- font-weight - толщина текста
- при указании семейства шрифтов бывает полезно указать несколько и например sans-serif
- text-decoration - подчеркивание текста
- text-indent - красная строка
- line-height - высота строки
- letter-spacing - расстояние между символами
- word-spacing - расстояние между словами
- text-align - выравнивание текста
- color - цвет текста
- text-transform - регистр текста
*/

/* рамки и тени */

.block {
  border: 1px solid red; /* толщина рамки, тип рамки, цвет рамки (можно задавать в любом порядке) */
  border-right-width: 4px; /* можно задавать конкретные значение для каждой стороны */
  border-left-color: green;
  outline: 1px solid aqua; /* обводка input, элементов в focus при перемещении 
  через tab нужна для acessabilty (ставить значение none не рекомендуется). Не учавствует в блочной модели */
  text-shadow: 3px 6px 18px #345daf; /* тень для текста первые три параметра должны идти по порядку, цвет в любом другом месте */
  box-shadow: inset 2px 10px 16px #187ccd; /* тень элемента, так же как и у текста может быть наложение теней */
}

/* Скругления углов, списки и цвета */

.block2 {
  border-radius: 50%; /* Задает общее скругление углов(в окружность можно превратить, взяв в знаение половину ширины объекта)  */

  border-radius: 20px 50px 10px 6px; /* Задает скругление каждому из углов */
  border-radius: 20px/40px; /* 20px - скругление по ширине, 40 - по высоте (так можно создавать элипс) */
  border-bottom-right-radius: 100px;  /* Задает отдельно левому нижнему углу скругление */

  list-style-type: none; /* Установить тип маркера; disc, circle, square, decimal, upper-alpha, lower-roman*/
  list-style-position: inside; /* маркеры внутри блока списка(outside - снаружи) */
  list-style-image: url('адрес картинки'); /* вставка картинки вместо маркера */

  color: green;
  color: #a13b7c; /* шестнадцатиричная версия */
  color: rgb(100, 78, 250); /* red, green, blue получаем через смешивание этих цветов */
  color: rgba(1, 77, 90, 0.6); /* rgb + прозрачность */
  color: hsl(1, 88, 45); /* оттенок, насыщенность, освещение */
  color: hsla(68, 12, 4, 0.3); /* оттенок, насыщенность, освещение + прозрачность */
}

/* отображение элементов и вендорные префиксы */

.block3 {
  display: none; /* скрывает элемент полностью и убирает из потока */
  visibility: hidden; /* скрывает элемент, но он остается в потоке */
  opacity: 0; /* делает элемент полностью прозрачным */
  color: transparent; /* задает цвет элемента прозрачным */

  -webkit-opacity: 0.7; /* префикс для хрома и сафари */
  -ms-opacity: 0.7; /* префикс для майкрософт эдж и интернет экспловер */
  -o-opacity: 0.7; /* префикс для оперы */
  -moz-opacity: 0.7; /* префикс для мозилы */
}

/* Фон */

.block4 {
  background-color: #187ccd; /* задает цвет фону */
  background-image: url('адрес картинки'); /* задает фоновое изображение */
  background-position: center 50%; /* задает положение картинки по оси x и y соответственно */
  background-size: cover; /* задает размер изображения cover - соответствие ширины и высоты картинки ширине и высоте элемента, contain - подстраивается под соответствующую (где нехватает) сторону, */
  background-repeat: repeat-x; /* задает повторение изображения */
  background-attachment: fixed; /* фиксирует изображение в заданном position */
  background: red url('адрес картинки') left bottom no-repeat fixed,
  pink url('адрес картинки') 150px 480px no-repeat; /* можно указать все вместе, сначало идет цвет, потом картинка, позиция, повторение, аттачмент. Также изображения могут накладываться друг на друга(внутри будет свмый первый) */
}

/* линейный и радиальный градиенты */

.block5 {
  background-image: linear-gradient(45deg, black, white, yellow, green); /* задает градиент с указанными цветами с углом в 45 */
  background: linear-gradient(to right bottom, pink 15%, purple 80%); /* указываем правый нижний угол для градиента и переход с розовому цвету на 15%, к фиолетовому на 80 (в диапозоне до 100%) */
  background: repeating-linear-gradient(to right bottom, pink 15px, purple 80px); /* отмечает переходы по пикселям и повторяет градиент */

  background: radial-gradient(ellipse, green 80%, yellow 20%) /* работает также как и линейный, ellipse указывает на форму (по умолчанию circle)*/
} 

/* Фильтры */

.block6 {
  filter: blur(24px); /* размывает изображение */
  filter: drop-shadow(5px 6px 4px rgba(100, 6, 90, 0.7)); /* задает тень, но в отличие на box-shadow действует на псевдоэлементы и не имеет insert и наложения */
  filter: grayscale(100%); /* задает оттенок серого (от 0  до 100 %) */
  filter: brightness(150%); /* задает яркость (от -50 до 150 %) */
  filter: contrast(150%); /* задает контрастность (от -50 до 150 %) */
  filter: hue-rotate(150%); /* поворотное наложение тона цвета (от 0 до 360 градусов) */
  filter: invert(150%); /* инвертирование цвета типо негатив (от 0 до 100) */
  filter: saturate(300%); /* задает насыщенность (от 0 до infinity) */
  filter: sepia(100%); /* задает старину изображению */
  filter: opacity(50%); /* аналогичен свойству opacity */
  filter: blur(30%) brightness(150%); /* так можно комбинировать фильтры */
}

/* Трансформации */

.block7 {
  transform: rotate(351deg); /* поворот элемента */
  transform: scale(0.2, 0.7); /* масштабирование по x и y (от 0 до 1 - уменьшение, больше 1 - увеличение) */
  transform: scaleY(1.2); /* масштабирование по y */
  transform: scaleX(0.5); /* масштабирование по x */
  transform: translate(50%, 50%); /*перемещение по x и y */
  transform: translateX(-78px); /* перемещение по оси x */
  transform: translateY(40px); /* перемещение по оси y */
  transform: skew(21deg, 21deg); /* наклон по x и y */
  transform: skewX(45deg); /* наклон по x */
  transform: skewY(360deg); /* наклон по y */
  transform: rotate(15deg) translate(35px, 60px) skewX(10deg); /* можно применить несколько трансформаций сразу */
  transform-origin: right bottom; /* задать опорную точку для трансформации по x и y (можно пиксели или %) */
}

/* Плавные переходы */

.block8 {
  transition-duration: 4s, 500ms; /* длительность перехода */
  transition-property: background-color, scale; /* свойство(а) к которому(ым) будет применен transition, если хотим указать все свойства используем значение all */
  transition-delay: 0, 1s; /* задержка времени перед применением transition */

  transition-timing-function: easy; /* скорость перехода easy - сначало медленно, потом ускоряется, потом медленно */
  transition-timing-function: easy-in; /* в начале медленно в конце быстро */
  transition-timing-function: easy-out; /* начало быстрое конец медленный */
  transition-timing-function: easy-in-out; /* начало и конец медленные */
  transition-timing-function: linear; /* скорость одинаковая */
  transition-timing-function: step-start; /* моментальный переход */
  transition-timing-function: step-end; /* по истечению указанного времени происходит моментальный переход */
  transition-timing-function: steps(10, start); /* постепенный переход в 10 шагов в начале первого шага */
  transition-timing-function: steps(10, end); /* постепенный переход в 10 шагов в конце первого шага */
  transition-timing-function: cubic-bezier(0.075, 0.82, 0.165, 1); /* переход на основании кривых бизье(чем круче линия, тем быстрее переход) */
  transition: all 1s easy .5s; /* property, duration, timing-function, delay */
}

/* Анимации */

@keyframes название-анимации {
  from {
  background-color: blue;
  }

  50% {
    background-color: black;
  }


  to {
    background-color: red;
  }
}

.block9 {
  /* анимации отличаются от переходов тем, что у может бытьних более двух состояний(начало и конец - одно свойство и другое) */
  animation: название-анимации;
  animation-duration: 5s; /* длительность анимации */
  animation-timing-function: linear; /* такие же значение как и у transition */
  animation-iteration-count: infinite; /* сколько раз повторится анимация (можно числом указать количество, а infinite - бесконечно) */
  animation-delay: 13s; /* задержка времени перед применением анимации */

  animation-direction: alternate; /* каждый нечетный повтор идет в нормальном направлении, четный в обратном */
  animation-direction: reverse; /* все повторы в обратном направлении */
  animation-direction: alternate-reverse; /* каждый нечетный повтор идет в обратном направлении, четный в нормальном */
  animation-direction: normal; /* все повторы в нормальном направлении (дефолтное значение) */

  animation-play-state: paused; /* останавливает анимацию (значение running - запускает) */
  animation-fill-mode: forwards; /* позволяет остановить анимацию в конце и не возвращать объект в начальное положение */

  animation: name duration timing-function delay iteration-count direction fill-mode;

  /* на элементе можно применить нескколько анимаций */
  animation: name duration timing-function delay iteration-count direction fill-mode, name2 duration timing-function;
}

/* таблицы и курсор */

.block10 {
  border-collapse: collapse; /* оставляет одну границу на смежный участках таблицы (separate - дефолтное значение) */
  border-spacing: 10px 20px; /* расстояние между границами по гризонтали и вертикали соответственно */
  caption-side: top; /* устанавливает положение caption сверху таблицы (bottom - снизу) */
  /* контент внутри таблицы можно выравнивать с помощью tex-align и vertical-align */
  empty-cells: hide; /* пустые ячейки лишаются границ и фона (show - дефолтное значение) */

  pointer-events: none; /* курсор больше не может взаимодействовать с этим элементом (может быть ползеным при disabled кнопках) */
  cursor: pointer; /* изменить внешний вид указателя */
}

/* текстовые эффекты и многоколоночный текст */

.block11 {
  text-overflow: ellipsis; /* обрежет текст, который не помещается в контейнер, поставит многоточие в конце (clip - по умолчанию) */
  white-space: nowrap; /* текст станет однострочным и не будет переноситься на новую строку */
  word-wrap: break-word; /* позволяет разбить слово и перенести его часть на другю строку, если слово не помещается */
  writing-mode: sideways-lr; /* сделает текст повертикали с левого края */
  word-break: break-all; /* все слова в конце строки разбиваются посимвольно оставляя свобоное место */

  column-count: 3; /* разбивает блок на 3 колонки */
  column-rule: 1px solid red; /* устанавливает разграничительную линию между колонками */
  column-width: 3; /* задает ширину колонки */
  column-gap: 3; /* задает расстояние между колонками */
}

/* медиа запросы */

@media screen {
  /* screen - для устройств с дисплеями, all - для всех устройств, speech - для скринридеров, print - для принтеров */
  body {
    background-color: #fff;
  }
}


