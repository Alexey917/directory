1. React - это библиотека для создания пользовательских интерфейсов. React независит от бразуера, сам по себе.

2. SPA - single page application - на одну страницу подгружается контент из js, вместо создания кучи html-файлов. При первой загрузке файл будет тяжелее, но потом с ним работать будет гораздо быстрее.

3. React позволяет больше работать с логикой, чем с элементами на странице(DOM - минимизирован)

4. React создает более легковесную копию DOM дерева - Дерево элементов. 
a) (Согласование) При изменении в компонентах создаетс коппия дерева элементов с измененными значениями
b) (render) как только react видит отличия в значения дерева элементов и его копии, начинается отрисовка контента

5. JSX - синтаксис при котором мы пишем html внутри функции js 

6.                             <App/>
                        /                  \
                    <PostForm/>           <PostList/>
                  /          \                 |
              <Button/>    <Input/>       <PostItem/>

7. Компонент обладает состоянием и нужно сообщить react'у что состояние изменилось

8. useState - имеет массив из объектов: 1 - начальное значение, 2 - функция меняющая это значение(состояние)

9. управляющий компонент пример: setValue(event.target.value) для input
Управляемый компонент - компонент состояние которого можно изменить

10. компоненты создаются в отдельной папке src -> components

- у классовых компонентов нет хуков. Состояния создаются через конструктор класса, а jsx возвращается внутри функции render() {}. У конструктора есть свойство this.state - начальное состояние, this.setState - метод изменяющий состояние

11. компонент - это функция, которая возращает jsx. Ее нужно не забывать экспортировать

12. Хуки - это функции, которые предоставляет React. Можно создавать их во вложенных компонентах 

13. className - атрибут создающий класс на элементе

14. Стили хранить в отдельной папке styles. Они импортируются в компоненты

15. Для начальной работы можно в папке public оставить только index.html, а в src App.js и index.js

16. props = {} - параметры передаваемые в функцию(компонент)


<PostItem post={{ id: 1, title: "JavaScript", body: "Description" }} />
const PostItem = (props) => {
  return (
    <div className="post">
      <div className="post-content">
        <strong>
          {props.post.id} {props.post.title}
        </strong>
        <p>{props.post.body}</p>
      </div>
      <div className="post-btn">
        <button>Удалить</button>
      </div>
    </div>
  );
};

Если аргументов несколько, то можно применить деструктуризацию const PostItem = ({props, info}) => {}


17. Также в компонент передаются ключи. Обычно они равны id объекта 
<PostItem post={title} key={post.id} />
Ключи позволяют отрисовывать только те элементы, в которых произошли изменения

18. Инлайн стили могут применяться так: <input style={{ marginBottom: 50 }} />

19. В компоненте может быть только один корневой div  return (<div></div>)

20. CSS модули позволяют генерировать уникальное название классов в зависимости от модуля. Если мы хотим создать компоненты со стилями(типо кнопки, инпуты определенного внешнего вида), то в папке components создаем папку UI в ней папку с названием компонента, а в ней jsx и сss файлы('название'.module.css)
Благодаря CSS модулям можно не прибегать к использованию БЭМ
Пример добавления стилей css modules:

import classes from "./MyButton.module.css";

const MyButton = ({ children, ...props }) => {
  return (
    <button className={classes.MyBtn} {...props}>
      {children}
    </button>
  );
};

Пропс children позволяет вкладывать во внутрь компонента что-нибудь(например другие компоненты). Т.е грубо говоря компонент выглядит как непарный тег, теперь он стал парным

в App.js: 

<MyButton onClick={addNewPost}>Создать пост</MyButton>

21. React по умолчанию не знает в какое место нужно добавлять вложенные компоненты - для этого нужен children(пример выше)

22. useRef - хук, который позволяет напрямую получить доступ к DOM элементу
Например благодаря useRef можно сделать двустороннее связывание(получение данных из input с обновлением состояния) для неуправляемого input (т.е его нельзя изменить)
пример:
const bodyInputRef = useRef();
...
где то там в коде
<MyInput type="text" placeholder="Описание поста" ref={bodyInputRef} />
.....

в файле компонента: 

const MyInput = React.forwardRef((props, ref) => {
  return <input ref={ref} className={classes.MyInp} {...props} />;
});


23. Перебрать какой-нибудь массив объектов и каждый объект передать в props можно с помощью функции map
пример:
{posts.map((post, index) => (<PostItem number={index + 1} post={post} key={post.id} />))}


24. Если у нас много input'ов и прочих одинаковых элементов, чтобы не создавать состояние для каждого, просто передадим объект в начальное состояние useState({})
пример:
const [post, setPost] = useState({ title: "", body: "" });

25. Отладка React - устанавливаем в хроме расширение React Devtools (также есть в microsoft edge)

26. Обмен данными между компонентами осуществляется от родителя к дочернему через props
В дочернем компоненте можно вызвать callback, который позволит передать инфу из дочернего в родителя
пример:
в дочернем компоненте - PostForm({create})   *

function addNewPost(e) {
    e.preventDefault();

    const newPost = { id: Date.now(), ...post };
    create(newPost);  - функцию можно передать через props * и вызвать в компоненте
    setPost({ title: "", body: "" });
  }
  ......
  (где то там в return)
  <MyButton onClick={addNewPost}>Создать пост</MyButton> по клику передаем функцию вверх 

  в родительском компоненте -
  const createPost = (newPost) => {
    setPosts([...posts, newPost]);
  };
  .....
   (где то там в return)
   <PostForm create={createPost} />

27. Функции часто прокидывают на несколько уровней вниз <App /> -> <PodtList /> -> <PostItem />

28. Условная отрисовка:
{условие ? компонент(что угодно) : омпонент(что угодно)}

29. UI компоненты это button'ы, input'ы, select'ы - т.е отдельные теги
Просто компоненты - например PostsList - блок содержащий посты

30. Ключи добавляются к перебираемым элементам (массивы select'ов)

31. Двухстороннее связывание пример:
  1 - создаем состояние
  2 - value = {начальное состояние}
  3 - onChange = {изменение состояния}

32. UseMemo(() => {return реузультат каких то вычислений}, [зависимости])
Этот хук делает вычисления -> запоминает результат -> кеширует (этот процесс назвается мемоизация), достает массив из кеша
[зависимости] - если изменяется, то функция снова пересчитывается

пример(поиск и фильтрация): 
  const sortedAndSearchPosts = useMemo(() => {
    return sortedPosts.filter(
      (post) =>
        post.title.toLowerCase().includes(filter.query.toLowerCase()) ||
        post.body.toLowerCase().includes(filter.query.toLowerCase())
    );
  }, [filter.query, sortedPosts]);


33. Сортировка:
  1 - создаем свой UI компонент например select
  2- в компоненте используем map для отображения опций, а также передаются пропсы

  const MySelect = ({ options, value, defaultValue, onChange }) => {
  return (
    <select value={value} onChange={(event) => onChange(event.target.value)}>
      <option disabled value="">
        {defaultValue}
      </option>
      {options.map((option) => (
        <option key={option.value} value={option.value}>
          {option.name}
        </option>
      ))}
    </select>
  );
};

  
  3 - создается состояние в app.js

  const [filter, setFilter] = useState({ sort: "", query: "" });

  4 - пропсы передаются в компонент myselect и создается функция сортировки(в примере без функции и используется отдельный компонент)

  const PostFilter = ({ filter, setFilter }) => {
  return (
    <div style={{ marginBottom: "35px" }}>
      <MyInput
        value={filter.query}
        onChange={(event) =>
          setFilter({ ...filter, query: event.target.value })
        }
        placeholder="Поиск..."
      />
      <MySelect
        value={filter.sort}
        onChange={(selectedSort) =>
          setFilter({ ...filter, sort: selectedSort })
        }
        defaultValue="Сортировка"
        options={[
          { value: "title", name: "По названию" },
          { value: "body", name: "По описанию" },
        ]}
      />
    </div>
  );
};


  5 - отсортированные посты добавляются в PostList

  <PostFilter filter={filter} setFilter={setFilter} />


34. React- router
  1. Создадим папку pages в которой будем хранить компоненты страниц
  2. устанавливаем npm i react-router-dom - библиотека для управления роутингом в браузере
  3. в index.js оборачиваем компонент <App/> в <BrowserRouter></BrowserRouter>
  4. в App осуществляем роутинг
  5. используем обертку Routes
  6. для всех Route можно сделать обертку с <Route></Route> где в props element использовать компонент Layout, в нем будет основная разметка стриницы, типо header, footer, main и.т.п, а весь динамических контент будет отображаться через компонент <Outlet />
  7. внутри будут <Route path=/путь element={компонент}/>
  8. <Route path="*" element={компонент}/> - это обработать роут если путь не существует
  9. по нажатию на ссылки и вообще все переходы не должны провоцировать перезагрузку страницы(главная идея SPA)
  10. Link - чтобы переходить по ссылкам без перезагрузки, имеют props to он работает как ref в ссылке <a></a>
  11. <Route index element={компонент}/> - показывает домашнюю страницу
  12. <Navlink></Navlink> - добавляет css класс active на ссылку. Можно написать свой класс через className={({isActive}) => isActive ? 'наш css класс' : ''}. Можно использовать как замену <Link></Link>, если нужно выделять текущую ссылку в котором мы находимся
  13. Можно написать свою кастомную ссылку()т.е создать компонент и стилизовать. Здесь можно применить хук useMatch(to) - который принимает ссылку и если она активна, возращает true
  14. чтобы использовать ссылки с динамическими параметрами, укажем их в путях через :
  <Route path=posts/:id> element={компонент}/>
  Количество параметров может быть любым
  <Route path=posts/:category/:topic> element={компонент}/>
  хук useParams() позволяет доставать параметр из адресной строки
  const id = useParams() - переменная должна совпадать с названием параметра от сюда <Route path=posts/:id>
  15. Хук useNavigate() - позволяет двигаться по истории переходов. Он возвращает функцию. - Если мы передадим туда число, это это будет переход по истории на n вперед (число положительное) или назад (отрицательное)
  const navigate = useNavigate()
  const goBack = () => navigate(-1) - назад на один шаг по истории 
  const goPostIdPage = () => navigate(`posts/${props.post.id}`);

  - Если мы передаем ссылку, то можем устанавить параметры replace и state
  replace: false - (по умолчанию) редирект на адрес, который запишется в историю
  replace: true - редирект на адрес без записи в историю
  state: from: location - может хранить любое значение, но чаще хранит путь откуда пришли
  - обычно useNavigate с ссылкой используется когда мы сделали какой то запрос и получив ответ нам нужен редирект
  - Компонент Navigate - позволяет делать переадресацию(например если адрес страницы изменился на другой)
  <Route path="about-us" element={<Navigate  to="about" replace/>} /> replace - не сохранит переход в историю
  - useLocation() - применяется при приватных маршрутах(например при авторизации). Возвращает объект, одни из ключей такого объекта это pathname и state
     Например создадим авторизацию:
      + создадим папку hoc
      + создадим компонент RequireAuth
      + внутри:
      const RequireAuth = ({children}) => {
        const location = useLocation();
        const auth = false;

        if (!auth) {
          return <Navigate to='/login' state={{from: location}} />
        }

        return children
      }

  

  Все роуты можно вынести в отдельную папку routes, в ней создать route.js, а внутри создать массив:

  export const routes = [
  { path: 'about', component: <About /> },
  { path: ':id', component: <PostIdPage /> },
  { path: '*', component: <Notfound /> },
]

далее в apps.js с помощью map выводим все роуты(естественно роут с главной странице и компонентом <Layout/> мы не помещаем в массив, они остаются в apps.js на месте)




useContext() - создает гобальное хранилище и позволяет передать данные в приложение и получить внутри любого компонента доступ к этим данным напрямую, минуя пропсы

-Создаем контекст на глобальном уровне
const UserContext = React.createContext({});

-оборачиваем то место, где будет применяться контекст
// user — данные которые лежат внутри контекста
<UserContext.Provider value={user}>
  <MyComponent />
</UserContext.Provider>

-применение контекста внутри компонента
import React, { useContext } from 'react';

const MyComponent = () => {
  // Возвращает контекст целиком
  const user = useContext(UserContext);

  return <h1>{user.name}</h1>;
}



Бесконечная лента - чтобы ее реализовать можно взять какой то элемент на страницы и отслеживать его, и когда он будет в зоне видимости подгружать новую порцию данных(или страницу)

Например элемент для наблюдения:
<div
  ref={lastElement}
  style={{ height: 20, backgroundColor: "red" }}
></div>

отдельно создадим кастомный хук для наблюдения за элементом:

import { useEffect, useRef } from 'react';

export const useObserver = (ref, canLoad, isLoading, callback) => {
  const observer = useRef();

  useEffect(() => {
      let cb = function (entries, observer) {
        if (isLoading) return;  // если посты загружаются, то мы ничего не делаем
        if (observer.current) observer.current.disconnect(); // если элемнт уже наблюдается, то отключчаем все наблюдения
        if (entries[0].isIntersecting && canLoad) callback(); // проверка в зоне видимости элемент или нет
      };
  
      observer.current = new IntersectionObserver(cb); // создаем наблюдателя
      observer.current.observe(ref.current); // устанавливаем за каким элементом наблюдаем
    }, [isLoading]);
}


35. <></> - fragment - вместо div

36. вызов состояния это асинхронный процесс. React накапливает какое количество изменений в целям оптимизации, если есть несколько функций, которые изменяют состояние. Нужно это чтобы избежать повторных манипуляций с DOM

37. npm install react-transition-group --save - библиотека для плавных переходов в react
  1. Оборачиваем например посты отображаемые через map в компонент <CSSTransition></CSSTransition>
  2. почитать как применять на странице  https://reactcommunity.org/react-transition-group/

38. Кастомные пользовательские хуки это фукции, которые используют внутри себя стандартные хуки из реакта. Используются каких либо собственных нужд. С помощью них можно делать декомпозицию, чтобы код был почище

39. Axios - это библиотека JavaScript для выполнения HTTP-запросов из браузера или среды выполнения JavaScript (например, Node.js)
jsonplaceholder - сервер, на котором хранится множество данных ввиде json. Полезен для тестирования или тренировки запросов на сервер
В строке адреса jsonplaceholder можно указать limit - макс. количество (постов) на странице, и page - номер страницы
?_limit=10&_page=3

40. Жизненный цикл компонента состоит из 3 этапов:
  - Монтирование (создание компонента)
  - Обновление (когда происходят какие то изменения состояний)
  - Демонтирование (когда удаляется компонент)

41. За отслеживать жизненный цикл позволяет useEffect(callback, [deps]) 
  - если массив зависимостей пустой, то мы можем отследить стадию монтрования(т.к изменения произойдут всего один раз при создании компонента)
  - с зависимостями можем отследить стадию обновления(изменения сотояний компонента)
  - если callback вернет функцию return () => {/* очистка памяти */}, то так мы сможем отследить демонтирование

42. Отличие useMemo от useEffect в том, что useMemo запускается вовремя рендеринга, а useEffect после рендеринга

43. Если мы устанавили проект на реакте через гит, то нам нужна команда npm i react-scripts@latest, чтобы установить все зависимости

